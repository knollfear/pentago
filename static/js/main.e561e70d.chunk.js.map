{"version":3,"sources":["components/Box.js","components/Target.js","components/Board.js","components/Game.js","index.js"],"names":["style","border","backgroundColor","padding","marginRight","marginBottom","cursor","float","borderRadius","position","zIndex","Box","_ref","name","_useDrag","useDrag","item","type","collect","monitor","isDragging","_useDrag2","Object","slicedToArray","drag","opacity","react_default","a","createElement","ref","className","concat","objectSpread","index_esm","opposites","t","b","r","l","Target","accept","onDrop","boardRef","_useDrop","useDrop","drop","dropResult","current","transform","clockwise","isOver","canDrop","getItem","_useDrop2","_useDrop2$","isActive","classes","Fragment","addresses","tl","rt","lb","br","Square","props","onClick","value","Board","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counterclockwise","rotateClockwisePreview","console","log","setState","rotateCounterClockwisePreview","bind","assertThisInitialized","React","createRef","i","_this2","squares","_this3","address","key","xIsNext","components_Box","components_Target","rotate","renderSquare","Component","calculateWinner","length","checkSquares","includes","start","offset","Game","RotateButtons","mouseMove","e","x","screenX","y","screenY","skipRotate","history","Array","fill","stepNumber","MouseDown","subBoard","addressBoard","map","slice","getsubBoard","newlocalSquares","newSquares","winner","step","move","desc","jumpTo","lib","backend","HTML5Backend","Board_Board","handleClick","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.e561e70d.chunk.js","sourcesContent":["import React from 'react'\nimport { useDrag } from 'react-dnd'\nimport {FaSync} from \"react-icons/fa\";\nconst style = {\n    border: '1px dashed gray',\n    backgroundColor: 'white',\n    padding: '0.5rem 1rem',\n    marginRight: '1.5rem',\n    marginBottom: '1.5rem',\n    cursor: 'move',\n    float: 'left',\n    borderRadius: '25px',\n    position:'absolute',\n    zIndex:999,\n\n\n};\n\nconst Box = ({ name }) => {\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: name },\n\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n\n        }),\n    });\n    const opacity = isDragging ? 0 : .7;\n\n\n    return (\n        <div ref={drag} className={`rotate-${name[0]} rotate-${name[1]}` } style={{ ...style, opacity }}>\n            <FaSync/>\n        </div>\n    )\n};\nexport default Box\n","import React from 'react'\nimport { useDrop } from 'react-dnd'\nimport {FaUndo, FaRedo, FaBullseye} from \"react-icons/fa\";\n\nconst style = {\n    border: '1px dashed gray',\n    backgroundColor: 'white',\n    padding: '0.5rem 1rem',\n    marginRight: '1.5rem',\n    marginBottom: '1.5rem',\n    cursor: 'move',\n    float: 'left',\n    borderRadius: '25px',\n    position:'absolute',\n    opacity:.6,\n    zIndex:999\n\n};\nconst opposites = {\n    \"t\":\"b\",\n    \"b\":\"t\",\n    \"r\":\"l\",\n    \"l\":\"r\"\n};\nconst Target = ({ accept, name, onDrop, boardRef }) => {\n\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept,\n        drop: dropResult => {\n            boardRef.current.style.transform = \"rotate(0deg)\";\n            onDrop(dropResult.type, clockwise)\n        },\n        collect: monitor => ({\n\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n            item:monitor.getItem()\n        }),\n    });\n\n    const isActive = isOver && canDrop;\n    const clockwise = accept[0] === name;\n    const classes = clockwise ?\n        `rotate-${accept[0]} rotate-${opposites[accept[1]]}`:\n        `rotate-${accept[1]} rotate-${opposites[accept[0]]}`;\n\n    /*canDrop && onActive(isActive);*/\n    let backgroundColor = '#222';\n    if (isActive) {\n        backgroundColor = 'darkgreen';\n        boardRef.current.style.transform = (accept[0] === name ? \"rotate(90deg)\":\"rotate(-90deg)\")\n\n    } else if (canDrop) {\n        backgroundColor = 'Gold';\n        boardRef.current.style.transform = \"rotate(0deg)\"\n    }\n\n    return (\n        <React.Fragment>\n            { canDrop &&\n                <div ref={drop} className={classes} style={{...style, backgroundColor}}>\n                    {clockwise ? <FaRedo/>:<FaUndo/>}\n\n                </div>\n            }\n\n        </React.Fragment>\n\n\n    )\n};\nexport default Target","import React from \"react\";\nimport Box from './Box';\nimport Target from \"./Target\";\nimport {FaTimes, FaRegCircle} from \"react-icons/fa\";\n\nconst addresses = {\n    \"tl\": [0,1,2,6,7,8,12,13,14],\n    \"rt\": [3,4,5,9,10,11,15,16,17],\n    \"lb\": [18,19,20,24,25,26,30,31,32],\n    \"br\": [21,22,23,27,28,29,33,34,35]\n};\n\nfunction Square (props){\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick}\n        >\n            {props.value && (props.value===\"X\" ? <FaTimes/>: <FaRegCircle/>)}\n        </button>\n    );\n\n}\n\nexport default class Board extends React.Component {\n    state={\n            clockwise:false,\n            counterclockwise:false\n        };\n    constructor(props){\n        super(props);\n        this.rotateClockwisePreview = this.rotateClockwisePreview.bind(this);\n        this.rotateCounterClockwisePreview = this.rotateCounterClockwisePreview.bind(this);\n        this.boardRef = React.createRef();\n        this.setState({\n            clockwise:false,\n            counterclockwise:false\n        });\n    }\n    rotateClockwisePreview = (isActive) => {\n        if (this.state.clockwise !== isActive) {\n            console.log(\"Rotating Clockwise: \" + isActive);\n            this.setState({\n                clockwise: isActive\n            })\n        }\n    };\n\n    rotateCounterClockwisePreview = (isActive) => {\n        if (this.state.counterclockwise !== isActive) {\n            console.log(\"Rotating Counter Clockwise: \" + isActive);\n            this.setState({\n                counterclockwise: isActive\n            })\n        }\n    };\n\n    renderSquare(i) {\n        return (\n            <Square\n                //value={this.props.squares[i] ? this.props.squares[i]: i}\n                value={this.props.squares[i] }\n                onClick={() => this.props.onClick(i)}\n                position={i}\n            />\n        );\n    }\n\n    render() {\n        const address = addresses[this.props.position];\n        return (\n\n            <div key={this.props.position} >\n                {this.props.xIsNext === null &&\n                    <React.Fragment>\n                        <Box name={this.props.position}/>\n                    {/*clockwise target*/}\n                        <Target\n                        accept={this.props.position}\n                        name = {this.props.position[0]}\n                        boardRef = {this.boardRef}\n                        onDrop={() => this.props.rotate(this.props.position, true)}\n                        key={'clockwise'+this.props.position[0]}\n\n                        />\n                    {/*counterclockwise target*/}\n                        <Target\n                        accept={this.props.position}\n                        name = {this.props.position[1]}\n                        boardRef = {this.boardRef}\n                        onDrop={() => this.props.rotate(this.props.position, false)}\n                        key={'counterclockwise'+this.props.position[1]}\n\n                        />\n                    </React.Fragment>\n                }\n                <div ref={this.boardRef}>\n                    <div className=\"board-row\">\n                        {this.renderSquare(address[0])}\n                        {this.renderSquare(address[1])}\n                        {this.renderSquare(address[2])}\n                    </div>\n                    <div className=\"board-row\">\n                        {this.renderSquare(address[3])}\n                        {this.renderSquare(address[4])}\n                        {this.renderSquare(address[5])}\n                    </div>\n                    <div className=\"board-row\">\n                        {this.renderSquare(address[6])}\n                        {this.renderSquare(address[7])}\n                        {this.renderSquare(address[8])}\n                    </div>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\n","import React from \"react\";\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport Board from \"./Board\";\nimport Target from \"./Target\";\nimport { FaRedo, FaUndo, FaSync} from 'react-icons/fa';\n\n\nconst addresses = {\n    \"tl\": [0,1,2,6,7,8,12,13,14],\n    \"rt\": [3,4,5,9,10,11,15,16,17],\n    \"lb\": [18,19,20,24,25,26,30,31,32],\n    \"br\": [21,22,23,27,28,29,33,34,35]\n};\n\nclass  Game extends React.Component {\n    getsubBoard(position){\n        let subBoard = Array(9).fill(null);\n        let addressBoard = addresses[position];\n        for (let i = 0; i < addressBoard.length; i++){\n            subBoard[i] = this.state.squares[addressBoard[i]]\n        }\n        return subBoard;\n    }\n\n    rotate(position, clockwise){\n        console.log(position);\n        console.log(clockwise);\n        const map = clockwise ? [2,4,6,-2,0,2,-6,-4,-2]:[6,2,-2,4,0,-4,2,-2,-6];\n        let address = addresses[position];\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        let subBoard = this.getsubBoard(position);\n        let newlocalSquares = this.getsubBoard(position);\n        for (let i = 0; i < newlocalSquares.length; i++){\n\n            newlocalSquares[i+map[i]] = subBoard[i]\n        }\n        let newSquares = this.state.squares.slice()\n        for (let i=0; i < newlocalSquares.length; i++){\n            newSquares[address[i]] = newlocalSquares[i]\n        }\n\n        this.setState({\n            history: history.concat([{\n                squares: newSquares\n            }]),\n            squares: newSquares,\n            stepNumber: history.length,\n            xIsNext: (this.state.stepNumber % 2) === 0,\n            winner: calculateWinner(newSquares)\n        });\n    }\n\n    skipRotate(){\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        this.setState({\n            history: history.concat([{\n                squares: this.state.squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: (this.state.stepNumber % 2) === 0,\n            winner: calculateWinner(this.state.squares)\n        });\n    }\n\n    RotateButtons = (props) => {\n        return (\n            <React.Fragment>\n                <button\n                    className=\"clockwise\"\n                    onClick={() => this.rotate(props.position, true)}\n                >\n                    <FaRedo />\n                </button>\n                <button\n                    className=\"counterClockwise\"\n                    onClick={() => this.rotate(props.position, false)}\n                >\n                    <FaUndo />\n                </button>\n            </React.Fragment>\n\n        )\n    };\n\n    handleClick(i){\n\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n\n\n        if (calculateWinner(squares) || squares[i] || this.state.xIsNext == null) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        const winner = calculateWinner(squares);\n        this.setState({\n            squares: squares,\n            stepNumber: history.length,\n            xIsNext: null,\n            winner: winner\n        });\n    }\n\n    mouseMove = (e) =>{\n\n        this.setState({\n            x: e.screenX,\n            y: e.screenY\n        })\n\n    };\n\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.rotate = this.rotate.bind(this);\n\n        this.skipRotate = this.skipRotate.bind(this);\n        this.state = {\n            history: [{\n                squares: Array(36).fill(null),\n            }],\n            squares: Array(36).fill(null),\n            stepNumber: 0,\n            xIsNext: true,\n            MouseDown:false\n        };\n    }\n    render() {\n        const history = this.state.history;\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        return (\n            <React.Fragment>\n                <DndProvider backend={HTML5Backend}>\n                <div className=\"game\">\n\n                    <div className={`game-board`}>\n\n                        <Board\n                            squares={this.state.squares}\n                            position ={\"tl\"}\n                            onClick={(i) => this.handleClick(i)}\n                            rotate={(position, clockwise) => this.rotate(position, clockwise)}\n                            xIsNext ={this.state.xIsNext}\n                        />\n\n                    </div>\n                    <div className=\"game-board\">\n\n                        <Board\n                            squares={this.state.squares}\n                            position={\"rt\"}\n                            onClick={(i) => this.handleClick(i)}\n                            rotate={(position, clockwise) => this.rotate(position, clockwise)}\n                            xIsNext ={this.state.xIsNext}\n                        />\n\n                    </div>\n                </div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={this.state.squares}\n                            position={\"lb\"}\n                            onClick={(i) => this.handleClick(i)}\n                            rotate={(position, clockwise) => this.rotate(position, clockwise)}\n                            xIsNext ={this.state.xIsNext}\n                        />\n\n                    </div>\n                    <div className=\"game-board\">\n                        <Board\n                            squares={this.state.squares}\n                            position={\"br\"}\n                            onClick={(i) => this.handleClick(i)}\n                            rotate={(position, clockwise) => this.rotate(position, clockwise)}\n                            xIsNext ={this.state.xIsNext}\n                        />\n\n                    </div>\n                    <div className=\"game-info\">\n\n                        {!this.state.winner && this.state.xIsNext === null &&\n                        <React.Fragment>\n                        <button\n                            className=\"skip\"\n                            onClick={() => this.skipRotate()}\n                        >\n                            Skip Rotate\n                        </button>\n                            <br/><br/><b>To rotate drag the <FaSync/> icon for your desired quadrant</b>\n                        </React.Fragment>\n                        }\n\n                        <div>{this.state.winner ? (\"Winner: \" + this.state.winner):(this.state.xIsNext != null && 'Current player: ' + (this.state.xIsNext ? 'X' : 'O'))}</div>\n\n                    </div>\n                </div>\n                    <div style={{padding:\"50px\"}}>\n                        Rules:\n                        <ul>\n                            <li>To win get 5 pieces in a row horizontally, vertically, or diagonally</li>\n                            <li>You must place a piece each turn</li>\n                            <li>You may ALSO rotate one quadrant 90 degrees</li>\n                        </ul>\n                    </div>\n                </DndProvider>\n            </React.Fragment>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    for (let i=0; i <squares.length; i ++){\n        if (squares[i]) {\n            // Check vertical and diagonal winners on the first 2 rows\n            if (i < 12) {\n                if (checkSquares(i, 6, squares)){\n                    return squares[i]\n                }\n                if ([0,1,6,7].includes(i)){\n                    // 7 is diagonal top left to bottom right\n                    if (checkSquares(i, 7, squares)){\n                        return squares[i]\n                    }\n                }\n                if ( [4,5,10,11].includes(i)){\n                    // 5 is diagonal top right to bottom left\n                    if(checkSquares(i, 5, squares)){\n                        return squares[i]\n                    }\n                }\n            }\n            // Check horizontal on the first 2 columns\n            if (i % 6 < 2) {\n                if (checkSquares(i, 1, squares)){\n                    return squares[i]\n                }\n            }\n\n        }\n    }\n\n    return null\n}\n\nfunction checkSquares(start, offset, squares){\n\n    for (let i=1; i<5; i ++){\n        if (squares[start] !== squares[i*offset + start]){\n            return\n        }\n    }\n    return squares[start]\n\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from \"./components/Game\"\n\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}